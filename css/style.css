/* FUENTES */

@font-face{
    /* nombre de la fuente */
    font-family: "TrebuchetMS";
    src: url(font/TrebuchetMS.ttf);
    /* grosor de la letra */
    font-weight: normal;
    /* como quiero que sea la letra */
    font-style: normal;
}

@font-face{
    font-family: "BebasNeue";
    src: url(font/BebasNeue.otf);
    font-weight: normal;
    font-style: normal;
}

@font-face{
    font-family: "webSymbolsRegular";
    src: url(font/websymbols-regular-webfont.eot);
    /* Vamos a poner la misma fuente de diferente forma para ayudar al navegador a que la utilice, ?#ieflix es para que el internet explorer funcione */
    src: url(font/websymbols-regular-webfont.eot?#ieflix) format('embedded-opentype'), url(font/websymbols-regular-webfont.woff) format('woff'), url(font/websymbols-regular-webfont.ttf) format('truetype'), url(font/websymbols-regular-webfont.svg?#WebSymbolsRegular) format('svg');
    font-weight: normal;
    font-style: normal;
}

/* Generales */
/* :root es para invocar al html del documento pero más específico */
/* vamos a utlizar otro tipo de código para poner los colores */
/* Creamos variables de cada color */

:root{
    --dark-blue: hsl(233, 26%, 24%);
    --lime-green: hsl(136, 65%, 51%);
    --bright-cyan: hsl(192, 70%, 51%);
    --grayish-blue: hsl(233, 8%, 62%);
    --light-grayish-blue: hsl(220, 16%, 96%);
    --very-light-gray: hsl(0, 0%, 98%);
    --white: hsl(0, 0%, 100%);
}

/* Empezamos dando estilo responsive */

*{
    margin: 0px;
}

body{
    font-family: "Public sans", sans-serif;
}

.container{
    width: 90%;
    max-width: 1200px;
    /* Centro el elemento */
    margin: 0 auto;
}

.nav{
    background-color: var(--white);
    height: 70px;
    /* Adaptamos con móviles los elementos hijos de nav, los pone en línea */
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav_img{
    /* Para poder manipular el elemento en forma de bloque */
    display: block;
}

.nav__icon{
    display: block;
}

.nav_links{
    /* Se queda fijo en su pocisión */
    position: fixed;
    top: 80px;
    left: 0px;
    right: 0px;
    width: 90%;
    margin: 0 auto;
    background-color: #fff;
    /* em es una unidad relativa al tamaño de la fuente del elemento. Por ejemplo, 1em es igual al tamaño actual de la fuente, y 3em sería tres veces ese tamaño. 3em: Este valor se aplica al padding superior e inferior del elemento.
    1em: Este valor se aplica al padding izquierdo y derecho del elemento. La fuente por defecto de HTML serían 16px*/
    padding: 3em 1em;
    box-shadow: 0 0 3px rgb(0,0,0,0.7);
    /* el que tenga el z-index más alto se colocará más arriba */
    z-index: 1000;
    border-radius: 6px;
    /* display: grid se utiliza para activar el modelo de diseño en cuadrícula o grid layout, que permite organizar elementos en filas y columnas de forma estructurada. Esto facilita la creación de diseños complejos y responsivos sin necesidad de usar muchos contenedores o posiciones complicadas. */
    display: grid;
    justify-items: center;
    /* Espaciados entre los elementos */
    gap: 2em;
    /* se utiliza para suavizar el cambio de una transformación visual, como escalar, rotar, o mover un elemento. En este caso:
    transform especifica que se quiere aplicar la transición solo a las transformaciones realizadas con la propiedad transform (como scale, rotate, translate, etc.).
    .3s indica que la transición tomará 0.3 segundos en completarse. */
    transition: transform .3s;
    /* e utiliza para mover un elemento verticalmente en el eje Y. El valor -150% indica que el elemento debe desplazarse hacia arriba por una distancia igual al 150% de su propia altura. La distancia es el 150% de la altura del propio elemento, y el signo negativo (-) indica que el movimiento será hacia arriba (un valor positivo lo desplazaría hacia abajo). Esto es para que se oculte*/
    transform: translateY(-150%);
}

/* invocamos la pseudoclase target cuando le demamos click al enlace*/

.nav_links:target{
    /* regresamos al menú */
    transform: translateY(0);
}

.nav__link{
    /* Es para quitarle el subrayado */
    text-decoration: none;
    color: var(--dark-blue);
}

.hero_main{
    max-width: 1200px;
}

.hero_background{
    width: 100%;
    height: 300px;
    background-image: url(../images/img-hero.png);
    /* Para no repetir la imagen */
    background-repeat: no-repeat;
    /* Ancho y alto */
    background-size: 100% 350px;
    /* Lo deja por defecto */
    position: relative;
}

/* Pseudoelemento agregar un contenido antes del alemento con la clase */
.hero_background::before{
    /* Siempre hay que agregar un contenido y en este caso no es nada */
    content: "";
    background-image: url(../images/vector.svg);
    width: 100%;
    max-width: 1000px;
    height: 300px;
    /* Por defecto la pondremos encima del elemento anterior */
    position: absolute;
    left: 0;
    right: 0;
    /* La imagen no está estirada y ocupa el 100% del elemento */
    background-size: cover;
    background-repeat: no-repeat;
    /* En CSS, background-position: bottom; se utiliza para especificar la posición del fondo de un elemento en relación con sus límites. Al aplicar background-position: bottom;, el fondo se alineará con la parte inferior del área del elemento. */
    background-position: bottom;
    margin: 0 auto;
}

.hero_texts{
    width: 90%;
    margin: 0 auto;
    text-align: center;
    padding-bottom: 80px;
}

.hero_title{
    margin-top: 1em;
    font-size: 2.3em;
    /* Grosor de la letra */
    font-weight: 400;
    color: var(--dark-blue);
}

.hero_paragraph{
    /* Alto entre linea */
    line-height: 1.5;
    font-weight: 300;
    margin: 1em 0 1.5em;
    color: var(--grayish-blue);
}

.cta{
    /* Lo colocamos en bloque de linea. Establece el comportamiento de la caja del elemento como un inline-block, lo que significa que el elemento se comportará como un elemento en línea (es decir, estará en la misma línea que otros elementos) pero con propiedades de bloque (como establecer dimensiones, márgenes, etc.). */
    display: inline-block;
    /* Añade un espacio interior (relleno) alrededor del contenido del elemento. 1em en la parte superior e inferior (vertical) y 2em en los lados (horizontal). */
    padding: 1em 2em;
    /* Establece un fondo de gradiente lineal que va de izquierda a derecha (to right). El gradiente empieza con el color definido en la variable --dark-blue y termina con el color definido en --bright-cyan. */
    background-image: linear-gradient(to right, var(--dark-blue), var(--bright-cyan));
    color: #fff;
    /* Elimina cualquier decoración del texto, como subrayado, que es común en los enlaces por defecto. */
    text-decoration: none;
    font-weight: bold;
    border-radius: 2em;
}

.easybank{
    background-color: var(--light-grayish-blue);
}

.easybank_container{
    text-align: center;
    padding: 70px 0px;
}
.title{
    /* 1rem: Equivale al tamaño de fuente del elemento raíz (normalmente el <html>), que por defecto suele ser de 16 píxeles en la mayoría de los navegadores. La unidad rem es útil para crear un diseño escalable, ya que se ajusta al tamaño de fuente raíz. Esto permite que todos los elementos que usen rem crezcan o disminuyan proporcionalmente si se cambia el tamaño de la fuente raíz, lo que mejora la accesibilidad y la capacidad de respuesta (responsive design). */
    font-size: 2rem;
    font-weight: 400;
    color: var(--dark-blue);
}

/* px (Píxeles)
Definición: El píxel (px) es una unidad absoluta de medida. Es una unidad fija y no depende del tamaño de la fuente raíz ni de ningún otro contexto.
Comportamiento: Un píxel es un punto en la pantalla, y su tamaño real puede variar dependiendo de la densidad de píxeles de la pantalla (por ejemplo, pantallas de alta resolución como Retina en dispositivos Apple).
em (Unidad relativa al contenedor)
Definición: em es una unidad relativa que depende del tamaño de fuente del elemento contenedor (es decir, el tamaño de la fuente del elemento padre o el propio elemento si no se define un tamaño específico).
Comportamiento: Si un elemento tiene un tamaño de fuente de 1em, ese tamaño es igual al tamaño de fuente del elemento contenedor. Si un elemento tiene 2em, será el doble del tamaño de la fuente del contenedor.
rem (Unidad relativa al raíz o html)
Definición: rem es una unidad relativa, pero en este caso, se basa en el tamaño de fuente del elemento raíz (<html>) y no en el contenedor.
Comportamiento: rem se calcula en relación con el tamaño de fuente de la etiqueta <html>. Si el tamaño de fuente de <html> es 16px, entonces 1rem es igual a 16px, sin importar cuántos elementos se aniden.
Sin unidad (solo un número)
Definición: Si no se especifica una unidad, el valor por defecto de CSS se aplica como un valor absoluto, dependiendo de la propiedad. Por ejemplo, si se omite la unidad en line-height o font-weight, CSS interpretará el valor de manera diferente.
Comportamiento: En propiedades como line-height, no es necesario poner una unidad, ya que es un valor multiplicador (un número relativo al tamaño de la fuente). Sin embargo, en propiedades como font-size, no se permite omitir la unidad. */

.easybank_paragraph{
    line-height: 1.5;
    margin-top: 1em;
    margin-bottom: 4em;
    color: var(--grayish-blue);
}

.easybank_services{
    /* lo queremos de forma de columna */
    display: grid;
    /* Espaciados entre los elementos usando grid */
    gap: 3em;
    max-width: 400px;
    margin: 0 auto;
}

.easybank_icon{
    display: block;
    margin: 0 auto;
    /* Para que el contenido no se ajuste y solo de la manera en la que hagamos nosotros */
    width: max-content;
}

.img_icon{
    width: 75px;
    height: 75px;
}

.easybank_title{
    margin: 1em 0;
    color: var(--dark-blue);
    font-weight: 400;
}

.easybank_copy{
    line-height: 1.5;
    color: var(--grayish-blue);
}

.articles{
    background-color: var(--very-light-gray);
}

.articles_container{
    padding: 70px 0px;
    text-align: center;
}

.articles_content{
    margin-top: 2em;
    display: grid;
    gap: 2em;
}

.articles_article{
    --img-bg: url('../images/1567497.jpg');
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
    background-color: #fff;
    border-radius: 7px;
    box-shadow: 0 0 3px rgb(0, 0, 0, 0.2);
    /* Recorta el contenido que se desborda: Cuando un elemento tiene un tamaño fijo (por ejemplo, un div con un width y height específicos) y su contenido excede esas dimensiones, overflow: hidden; oculta todo el contenido que no cabe dentro del área visible del elemento. En lugar de mostrar barras de desplazamiento (scrollbars), simplemente se corta el contenido que sobrepasa el límite del elemento. */
    overflow: hidden;
    text-align: left;
}

/* La pseudoclase :nth-of-type(2) se utiliza en CSS para seleccionar un elemento que es el segundo de su tipo dentro de su contenedor padre, teniendo en cuenta únicamente los elementos del mismo tipo (etiqueta) que los preceden. :nth-of-type(2): Es una pseudoclase que selecciona el segundo elemento de un tipo específico dentro de su contenedor. El número 2 indica que selecciona el segundo elemento de ese tipo dentro del contenedor, sin importar el tipo de contenido o clase de los otros elementos. */

.articles_article:nth-of-type(2){
    --img-bg: url('../images/aprender-fotografia_dest.jpg');
}

.articles_article:nth-of-type(3){
    --img-bg: url('../images/R1-300x250.png');
}

.articles_article:nth-of-type(4){
    --img-bg: url('../images/24_rest_api_tips.jpg');
}

.articles_img{
    width: 100%;
    height: 250px;
    background-image: var(--img-bg);
    /* Adaptamos al contenedor */
    background-size: cover;
    background-position: center;
}

.articles_text{
    padding: 1.5em 1em 2.5em;
}

.articles_author{
    color: var(--grayish-blue);
    font-size: 0.8rem;
}

.articles_title{
    color: var(--dark-blue);
    font-weight: 400;
    /* Margen por arriba y por debajo */
    margin: 0.7rem 0;
}

.articles_paragraph{
    color: var(--grayish-blue);
    line-height: 1.5;
}

/* FOOTER */

#footer{
    width: 100%;
    height: 470px;
    background: rgba(0, 0, 0, 0.09);
    color: black;
    /* Para que nada se salga y se oculte lo que salga */
    overflow: hidden;
}

/* El selector #footer .wrap > div {}:

Selecciona todos los elementos <div> que son hijos directos de un elemento con la clase .wrap dentro de un contenedor con el ID footer.
Es útil para aplicar estilos de manera específica, evitando afectar a elementos más profundos en la jerarquía del DOM.  */

#footer .wrap>div{
    float: left;
    width: 320px;
    height: 370px;
    margin: 40px;
    text-align: center;
    color: black;
    font-family: 'TrenuchetMS';
}

/* Seleccionamos los enlaces o anchors del footer "#" */

#footer a{
    text-decoration: none;
    color: rgba(0, 0, 0, 0.569);
    /* Agregamos efecto de transicion de 300 mili segundos */
    transition: all 300ms;
}

#footer h5{
    display: block;
    background: white;
    height: 50px;
    letter-spacing: 2px;
    text-align: center;
    font-family: BebasNeue;
    font-size: 25px;
    line-height: 55px;
    color: black;
    border-radius: 5px;
    margin-bottom: 15px;
}

#footer ul{
    text-align: left;
    margin: 20px;
    font-size: 20px;
}

#footer ul li{
    margin-top: 10px;
    padding: 5px;
    border-bottom: 1px solid #ccc;
}

#footer ul li a{
    display: block;
    height: 40px;
    transition: all 300ms;
}

/* Cuando pasamos por el li cada a(enlace) va a ahcer lo siguiente */

#footer ul li:hover a{
    padding-left: 40px;
    color: black;
    width: 100%;
}

/* Invocamos el mapa */

#footer iframe{
    width: 100%;
    height: 300px;
    border-radius: 5px;
    box-shadow: 0px 0px 5px gray;
}

#footer img{
    margin-bottom: 15px;
}

#footer #browsers img{
    width: 45px;
}

.cta--nav{
    /* Desaparece */
    display: none;
}

/* @media (min-width: 768px): Indica que los estilos dentro de este bloque solo se aplicarán si el ancho de la pantalla (o ventana del navegador) es de al menos 768 píxeles. Esto generalmente corresponde a pantallas de tablets o dispositivos de mayor tamaño, incluyendo laptops y monitores de escritorio. */

@media (min-width:768px){
    .nav_links{
        /* En CSS, los valores unset para las propiedades position y transform se utilizan para restablecer estas propiedades a su estado predeterminado o heredado, dependiendo del contexto. */
        position: unset;
        transform: unset;
        margin: 0px;
        border-radius: 0px;
        box-shadow: unset;
        padding: 0px;
        width: max-content;
        /* Para ponerlos en fila */
        display: flex;
        gap: 1em;
        height: 100%;
    }

    .nav__link{
        display: flex;
        /* Lo centramos verticalmente */
        align-items: center;
        height: 100%;
        text-decoration: none;
        color: var(--grayish-blue);
        position: relative;
    }

    .nav__link::before{
        content: "";
        /* Por encima del elemento anterior */
        position: absolute;
        width: 100%;
        height: 4px;
        background-color: var(--lime-green);
        /* Los ponemos antes y ahora lo pondremos por debajo del menu */
        bottom: 0px;
        left: 0px;
        opacity: 0;
        transition:opacity 0.3s;
    }

    .nav__link:hover::before{
        opacity: 1;
    }

    /* Quitamos la hamburguesa */
    .nav_menu{
        display: none;
    }

    /* Para mostrar el boton */
    .cta--nav{
        display: inline-block;
    }

    .hero_main{
        width: 95%;
        margin-left: auto;
        /* Elementos en una fila */
        display: flex;
        /* Cambiamos el orden */
        flex-direction: row-reverse;
        height: 450px;
        align-items: center;
    }

    .hero_background{
        width: 50%;
        height: 100%;
        margin-top: 10px;
        background-image: url(../images/img-hero.png);
        background-size: cover;
        background-repeat: repeat;
        background-position: left center;
        border-radius: 900px;
    }

    .hero_background::before{
        left: unset;
        right: 0px;
        height: 550px;
        /* 50px (horizontal): La imagen de fondo se desplaza 50 píxeles hacia la derecha desde el borde izquierdo del contenedor.
        -45px (vertical): La imagen de fondo se desplaza 45 píxeles hacia arriba desde el borde superior del contenedor. Los valores negativos mueven la imagen en la dirección opuesta al eje correspondiente. */
        background-position: 50px -45px;
    }

    .hero_texts{
        /* Hacemos más grande la imagen haciendo el texto de 40% */
        width: 40%;
        padding-bottom: 0;
        margin: o auto;
        /* texto  la izquierda */
        text-align: start;
    }

    .hero_title{
        margin: 0;
    }

    .easybank_container{
        text-align: start;
    }

    .easybank_paragraph{
        width: 550px;
    }

    .easybank_services{
        margin: 0;
        max-width: unset;
        /* Cada elemento hijo, que en este caso son 4, 1 feacción, o sea, que cada elemento hijo ocupa 1 fracción igual, o sea, una columna*/
        grid-template-columns: repeat(4, 1fr);
        gap: 1.5em;
    }

    .easybank_icon{
        margin-left: unset;
    }

    .articles_container{
        text-align: start;
    }

    .articles_content{
        grid-template-columns: repeat(4, 1fr);
        gap: 1em;
    }
}
